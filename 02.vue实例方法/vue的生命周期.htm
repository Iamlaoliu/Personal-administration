<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>悟空，摇头了</title>
    <script src="../lib/vue.js"></script>
</head>

<body>
    <div id="app">
        {{msg}}
        <h3 id="h3">
            {{msg}}
        </h3>
        <button @click="update" value="验证beforeUpdate"></button>
        <button value="=">我是谁</button>
    </div>
    <script>
        var vm = new Vue({
            el: '#app',
            data: {
                msg: "我是谁"
            },
            methods: {
                show() {
                    console.log("执行了show方法");
                },
                update() {
                    this.msg = "我不是任何人";
                }
            },
            beforeCreate() {  //这是遇到的第一个生命周期函数 ，表示实例完全被创建出来之前，会执行它 （初始化到一半）
                // console.log(this.msg);
                // this.show();
                console.log("注意 在 beforeCreate 生命周期函数执行的时候 ，data 和 methods 中 数据都还没有初始化");
                //注意 在 beforeCreate 生命周期函数执行的时候 ，data 和 methods 中 数据都还没有初始化
            },
            created() { // 这是遇到的第二个生命周期函数
                console.log(this.msg);
                this.show();
                console.log("注意 在 Created 生命周期函数执行的时候 ，data 和 methods 都已经初始化好了！");
                //如果要操作 data中的数据 或者 调用methods中的方法  最早，只能在  created 中操作
            },
            beforeMount() {  //这是遇到的第三个生命周期函数
                //  表示， 模板已经在内存中编辑完成了，但是尚未把模板渲染到页面中去
                console.log(document.getElementById("h3").innerText);
                console.log("在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串");
                //  在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串
            },
            mounted() {  // 这是第四个生命周期函数

                //  表示 ，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到挂载好的页面了
                console.log(document.getElementById("h3").innerText);
                // 注意：mounted 是实例创建期间的最后一个生命周期函数，当执行完mounted 就表示，实例已经
                //       被完全创建好了，此时，如果没有其他的操作的话，这个实例，就静静的 躺在我们内存中，一动不动        
            },
            //接下来是运行中的两个钩子函数
            beforeUpdate() {   // 这是第五个生命周期函数
            
                // 这时候表示，我们的界面还没有被更新 【数据被更新了吗?】 数据更新触发的这个钩子函数
                console.log(document.getElementById("h3").innerText);
                console.log(this.msg);
                //得出的结论：当执行 beforeUpdate 的时候，页面中显示的数据，仍然还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步
            },
            updated() { // 这是第六个生命周期函数
                console.log(document.getElementById("h3").innerText);
            },
            beforeDestroy () {  // 这是第七个生命周期函数
                //当执行 beforeDestroy 钩子函数的时候，Vue实例就已经 从 运行阶段按，进入到了销毁阶段;

                //当执行 beforeDestroy 钩子函数的时候，实例身上所有的data和所有的methods，以及 过滤器 、 指令 .... 都处于可用状态，此时，还没有真正执行销毁的过程
            },
            destroyed () {
                // 当执行到 destroyed 函数的时候 组件就已经被完全销毁了，此时组件中的所有的数据、方法、指令、过滤器...都已经不可用了
            }
        });
    </script>
</body>

</html>